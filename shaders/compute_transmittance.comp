#version 450

#define WIDTH 256
#define HEIGHT 64
#define WORKGROUP_SIZE 8

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(set=0, binding=0) uniform u_atmosphere_ubo {
    vec4 rayleighScattering;
    vec4 mieScattering;
    vec4 mieAbsorption;
    vec4 sunDir;
    float bottom;
    float top;
} atmosphere;

layout(set=0, binding = 1, rgba8) uniform image2D image;

#define PI 3.14159265358f

float intersectRaySphere(vec3 ro, vec3 rd, vec3 so, float sr)
{
    vec3 f = ro - so;
    float b2 = dot(f, rd);
    float r2 = sr * sr;
    vec3 fd = f - b2 * rd;
    float discriminant = r2 - dot(fd, fd);
    if (discriminant < 0.f)
        return -1.f;

    float c = dot(f, f) - r2;
    float sqrtv = sqrt(discriminant);
    float q = (b2 >= 0) ? -sqrtv - b2 : sqrtv - b2;

    float t0 = c / q;
    float t1 = q;

    if (t0 < 0.f && t1 < 0.f)
        return -1.f;        
    
    return t0 < 0.f ? max(0.f, t1) : t1 < 0.f ? max(0.f, t0) : max(0.f, min(t0, t1));
}

float getRayTmax(vec3 pos, vec3 dir, float maxMax) {
    vec3 org = vec3(0.f);
    float tBottom = intersectRaySphere(pos, dir, org, atmosphere.bottom);
    float tTop = intersectRaySphere(pos, dir, org, atmosphere.top);
    float tMax = 0.0f;

    if (tBottom < 0.0f) {
        if (tTop < 0.0f) {
            return 0.0f;
        } else {
            tMax = tTop;
        }
    } else {
        if (tTop > 0.0f) {
            tMax = min(tTop, tBottom);
        }
    }

    tMax = min(tMax, maxMax);

    return tMax;
}


float getRayleighPhase(float mu) {
    return (3.f * (1.f + mu * mu)) / (16.f * PI);
}

float getCornettePhase(float g, float mu) {
    const float g2 = g * g;
    return (3.f * (1.f - g2) * (1.f + mu * mu)) / (8.f * PI * (2 + g2) * pow(1 + g2 - 2 * g * mu, 3.f / 2.f));
}

struct MediumRGBSample {
    vec3 scattering;
    vec3 absorption;
    vec3 extinction;

    vec3 mieScattering;
    vec3 mieAbsorption;
    vec3 mieExtinction;

    vec3 rayleighScattering;
    vec3 rayleighAbsorption;
    vec3 rayleighExtinction;
};

MediumRGBSample sampleMedium(vec3 pos) {
    const float height = length(pos) - atmosphere.bottom;
    
    const float mDensity = exp(-height / 1.2f);
    const float rDensity = exp(-height / 8.f);

    MediumRGBSample s;

    s.mieScattering = mDensity * atmosphere.mieScattering.rgb;
    s.mieAbsorption = mDensity * atmosphere.mieAbsorption.rgb;
    s.mieExtinction = mDensity * (atmosphere.mieScattering.rgb + atmosphere.mieAbsorption.rgb);

    s.rayleighScattering = rDensity * atmosphere.rayleighScattering.rgb;
    s.rayleighAbsorption = vec3(0.f);
    s.rayleighExtinction = s.rayleighScattering + s.rayleighAbsorption;

    s.scattering = s.mieScattering + s.rayleighScattering.rgb;
    s.absorption = s.mieAbsorption + s.rayleighAbsorption.rgb;
    s.extinction = s.mieExtinction + s.rayleighExtinction.rgb;

    return s;
}

vec3 sunRadiance(vec3 pos, vec3 dir, vec3 color, bool limb)
{
    const vec3 sunDir = normalize(atmosphere.sunDir.xyz);
    const vec3 forward = vec3(0.f, 0.f, 1.f);
    const float sun_scale = mix(1.f, 5.f, abs(dot(sunDir, forward)));
    float diameter_radians = (sun_scale * 1920.f / 3600.f) * (PI / 180.f);
    float cos_sun_angular_radius = cos(diameter_radians / 2.f);
    if (dot(dir, sunDir) > cos_sun_angular_radius) {
        float r = abs(dot(dir, sunDir)) / cos_sun_angular_radius;
        float t = intersectRaySphere(pos, dir, vec3(0.f), atmosphere.bottom);
        color = limb ? color : vec3(100.f);
        if (t < 0.0f)
            return mix(r * vec3(100.f), color, r);
    }

    return vec3(0.f);
}

float uvs2unit(float u, float resolution) 
{ 
    return (u + 0.5f / resolution) * (resolution / (resolution + 1.0f)); 
}

float unit2uvs(float u, float resolution) { 
    return (u - 0.5f / resolution) * (resolution / (resolution - 1.0f)); 
}

void uv2transmittance(vec2 uv, out float height, out float viewCosAngle)
{
    uvec2 res = uvec2(WIDTH, HEIGHT);
    uv = vec2(uvs2unit(uv.x, res.x), uvs2unit(uv.y, res.y));
    float xMu = uv.x;
    float xR = uv.y;

    float H = sqrt(atmosphere.top * atmosphere.top - atmosphere.bottom * atmosphere.bottom);
    float rho = H * xR;
    height = sqrt(rho * rho + atmosphere.bottom * atmosphere.bottom);

    float dMin = atmosphere.top - height;
    float dMax = rho + H;
    float d = dMin + xMu * (dMax - dMin);
    viewCosAngle = d == 0.0 ? 1.0f : (H * H - rho * rho - d * d) / (2.0 * height * d);
    viewCosAngle = clamp(viewCosAngle, -1.0, 1.0);
}

void transmittance2uv(in float height, in float viewCosAngle, out vec2 uv)
{
    float H = sqrt(max(0.0f, atmosphere.top * atmosphere.top - atmosphere.bottom * atmosphere.bottom));
    float rho = sqrt(max(0.0f, height * height - atmosphere.bottom * atmosphere.bottom));

    float discriminant = height * height * (viewCosAngle * viewCosAngle - 1.0) + atmosphere.top * atmosphere.top;
    float d = max(0.0, (-height * viewCosAngle + sqrt(max(discriminant, 0))));

    float dMin = atmosphere.top - height;
    float dMax = rho + H;
    float xMu = (d - dMin) / (dMax - dMin);
    float xR = rho / H;

    uv = vec2(xMu, xR);
}

vec3 computeOpticalThickness(vec3 pos, vec3 dir, float maxMax)
{
    const float tMax = getRayTmax(pos, dir, maxMax);

    vec3 opticalThickness = vec3(0.f);
    const float sampleCount = 50.f;

    float dt = tMax / sampleCount;
    float t = 0.0f;
    float tPrev = 0.0;
    const float segmentFrac = 0.3f;

    float mDensity = 0;
    float rDensity = 0;
    for (float s = 0.0f; s < sampleCount; s += 1.0f) {
        float tNew = tMax * (s + segmentFrac) / sampleCount;
        dt = tNew - t;
        t = tNew;

        vec3 P = pos + t * dir;
        float height = length(P - vec3(0.f)) - atmosphere.bottom;
        mDensity += exp(-height/1.2f) * dt;
        rDensity += exp(-height/8.f) * dt;
    }
    opticalThickness = atmosphere.rayleighScattering.rgb * rDensity + (atmosphere.mieScattering.rgb + atmosphere.mieAbsorption.rgb) * mDensity;

    return opticalThickness;
}

void main() {
    if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT) return;

    float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
    float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);
    vec2 pixPos = vec2(gl_GlobalInvocationID.xy) + 0.5f;
    vec2 uv = pixPos / vec2(WIDTH, HEIGHT);
    float height;
    float viewCosAngle;
    uv2transmittance(uv, height, viewCosAngle);

    vec3 pos = vec3(0.0f, height, 0.0f);
    vec3 dir = vec3(0.0f, viewCosAngle, sqrt(1.0 - viewCosAngle * viewCosAngle));

    vec3 transmittance = exp(-computeOpticalThickness(pos, dir, 900000000.f));

    imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(transmittance, 1.f));
}
